- child_relationships = f.object.child_relationships

section.py-4(data-controller="autocomplete")
  = content_tag :section,
                class: "autocomplete",
                data: { controller: "autocomplete",
                        autocomplete_target: "wrapper",
                        autocomplete_url_value: unit_search_path(current_unit) } do

    // select tag that actually gets submitted as part of the form
    // - select_name = "event[event_organizers_attributes][][unit_membership_id][]"
    - select_name = "member_relationships[unit_membership_ids][]"
    select.hidden(data-autocomplete-target="selections" multiple="multiple" name=select_name id="event_event_organizer_unit_membership_ids")
      - child_relationships.each do |relationship|
        option(value="#{relationship.child_unit_membership.id}" selected="") = relationship

    = f.label :child_relationships, "Can RSVP on behalf of:", class: "block font-bold mb-1"
    
    div.rounded.border.border-stone-400.px-2.py-0.dark:bg-stone-800.dark:border-stone-700
      .flex.flex-wrap.gap-1.items-center
        // left part: list of organizers
        div.flex.flex-wrap.gap-1(data-autocomplete-target="list")
          - child_relationships.each do |relationship|
            = render partial: "unit_memberships/partials/form/relationship", locals: { member: relationship.child_unit_membership }

        // right part: input field
        .flex-initial.relative
          = text_field_tag :organizers, "",
                            class: "w-full px-0 focus:ring-0 focus:outline-none focus:border-0 border-0 w-full placeholder:text-stone-300 bg-transparent",
                            autocomplete: "off",
                            placeholder: "Type a name",
                            data: { autocomplete_target: "query", action: "keyup->autocomplete#search" }

          // autocomplete results
          = content_tag :ul,
                        class: "absolute autocomplete-results min-w-72 max-h-96 bg-cyan-800 text-cyan-100 rounded overflow-auto z-10",
                        data: { autocomplete_target: "results" } do

            - current_unit.members.each do |member|
              - display_class = f.object.children.include?(member) ? "hidden existing" : ""

              li(class="#{display_class}")
                = link_to member.full_display_name,
                          "#",
                          class: "block px-4 py-2 hover:bg-cyan-700 whitespace-nowrap font-bold",
                          data: { action: "autocomplete#select", autocomplete_target: "option", autocomplete_value: member.id }

css:
  .autocomplete-results {
    display: none;
  }

  .autocomplete-active .autocomplete-results {
    display: block;
  }