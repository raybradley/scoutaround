= turbo_frame_tag("main")
  .w-full.px-2.md:px-12.pb-4
    = render partial: "layouts/flash"
    
    header.mb-4.md:mt-0.sticky.top-0.pt-12.md:pt-4.bg-white.pb-4
      .flex.flex-col.md:flex-row.justify-between.md:items-center
        .left
          h1.text-2xl.font-semibold.mb-2
            = t("members.index.page_title")
      
          = link_to new_unit_unit_membership_path(@current_unit),
                    class: "group text-stone-500 text-sm",
                    data: { turbo_action: "advance" } do
            i.fa-layers.fa-fw.mr-1
              i.fa-solid.fa-circle.text-white.group-hover:text-brand-500(data-fa-transform="grow-3")
              i.fa-regular.fa-plus.text-brand-500.group-hover:text-white

            = "Add member"

        .right
          .relative.text-sm
            i.fa-magnifying-glass.fas.absolute.left-3.text-stone-400(style="top:50%;transform:translateY(-50%);")

            = search_field_tag(:search, 
              "",
              class: "text-sm block w-full rounded px-3 py-2 pl-10 placeholder-stone-400 border border-stone-400",
              autofocus: true,
              autocomplete: 'off',
              spell_check: false,
              placeholder: raw(t('members.search_by_name')),
              onkeyup: 'performNameSearch();')

    .grid.grid-cols-1.md:grid-cols-2.lg:grid-cols-3.xl:grid-cols-4.2xl:grid-cols-5.gap-4
      - ("A".."Z").each do |letter|
        - members = @current_unit_memberships.select{ |m| m.first_name.first.downcase == letter.downcase }
        section.member-index
          h2.font-semibold.text-brand-500.border-t.border-stone-500.dark:border-stone-400.py-3
            = letter

          ol.divide-y.divide-stone-300.dark:divide-stone-700
            = render members

javascript:
  function performNameSearch() {
    var input = document.querySelector('#search');
    var filter = input.value.toUpperCase();
    var rows = document.querySelectorAll('article.member');

    rows.forEach(function(row) {
      var nameCell = row.querySelector('.member-name');

      // the normalize and replace voodoo converts diacriticals to undecorated letters, e.g. Ã± -> n
      var name = nameCell.innerText.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
      if (filter.length == 0 || name.toUpperCase().indexOf(filter) > -1) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });

    toggleIndices(".member-index", ".member")
  }

  function toggleIndices(parentClass, childClass) {
    var visibleParents = 0;

    document.querySelectorAll(parentClass).forEach(function(elem) {
      elem.style.display = "none";

      // ...then, iterate over all visible event rows, traverse backward until we
      // hit a month header, and reveal it. There's an inefficiency here in that
      // we're iterating on every visible event row, meaning we'll repeatedly
      // unhide the same month headers.
      // TODO: traverse forward to next month header, then traverse from there to the next visible event row
      var visibleCount = 0;

      elem.querySelectorAll(childClass).forEach(function(elem) {
        var compStyles = window.getComputedStyle(elem);
        var compDisplay = compStyles.getPropertyValue('display');
        if(compDisplay == "none") {
          return; // nothing to see here...move on
        }
        visibleCount++;
      });

      if (visibleCount > 0) {
        elem.style.display = "block";
        visibleParents++;
      }
    });
  } // function toggleIndices