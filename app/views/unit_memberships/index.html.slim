= turbo_frame_tag("main")
  .max-w-2xl.mx-auto
    = render partial: "layouts/flash"
    = render partial: "unit_memberships/partials/index/header"
    
    = form_tag bulk_update_unit_members_path(@unit), id: "bulk_edit_form"
      = render "member_bulk_edit_panel"

      - ("A".."Z").each do |letter|
        - letter_memberships = @unit_memberships.select{ |m| m.first_name.first.downcase == letter.downcase }
        = render partial: "member_index", locals: { letter: letter, unit_memberships: letter_memberships } if letter_memberships.present?

  javascript:
    document.title = "Member Roster Â· #{@unit.name}"

  scss:
    th.selection, td.selection {
      display: none;
    }    

    #bulk_edit_options {
      display: none;
    }

    .bulk-editing {
      display: none;
    }

    body.bulk-edit {
      th.selection, td.selection {
        display: table-cell;
      }

      #regular_options {
        display: none;
      }

      #bulk_edit_options {
        display: inline-block;
      }

      .extended-member-info {
        display: none;
      }

      .not-bulk-editing {
        display: none;
      }

      .bulk-editing {
        display: inline-block;
      }
    }

    td.fit-width {
      width: 1%;
      white-space: nowrap;
    }

    .member-inactive {
      display: none;
    }

    th.status, td.status {
      display: none;
    }

    body.showing-inactive-members .member-hide-for-inactive {
      display: none;
    }

    body.showing-inactive-members .member-inactive {
      display: table-row;
    }

scss:
 .collapse-anim-off {
    -webkit-transition: none;
    transition: none;
  }  

javascript:
  // BULK EDIT FACILITY

  // 'Select All' checkbox
  document.querySelector('#select_all_members_checkbox')?.addEventListener('click', function(event) {
    const checked = this.checked;
    document.querySelectorAll('.bulk-publish-checkbox').forEach(function (elem) {
        elem.checked = checked && elem.offsetParent !== null;
    });
    validateBulkEditState();
  });

  // enter bulk edit mode by adding a body class
  document.querySelector('#bulk_edit_link')?.addEventListener('click', function(event) {
    document.body.classList.toggle('bulk-edit');
    event.preventDefault();
  });

  // exit bulk edit mode by removing the same body class
  document.querySelector('#cancel_bulk_edit')?.addEventListener('click', function(event) {
    document.body.classList.remove('bulk-edit');
    resetBulkEdit();
    event.preventDefault();
  });

  // wire up each checkbox to validate the screen and update the checked count
  document.querySelectorAll('.bulk-edit-checkbox').forEach(function(elem) {
    elem.addEventListener('click', function(event) {
      validateBulkEditState();
      event.stopPropagation();
    })
  });

  document.querySelectorAll('.bulk-edit-value').forEach(function(elem) {
    elem.addEventListener('click', function(event) {
      validateBulkEditState();
      event.stopPropagation();
    })
  });  

  // wire up the bulk edit Apply button
  document.querySelector('#execute_bulk_edit_button')?.addEventListener('click', function(event) {
    document.querySelector('#bulk_edit_form').submit();
    event.preventDefault();
  });

  // toggle inactive members
  document.querySelector('#show_inactive_members_link')?.addEventListener('click', function(event) {
    document.body.classList.toggle('showing-inactive-members');
    event.preventDefault();
  });

  var bulkEditExecuteButton;
  var originalBulkEditExecuteButtonCaption;

  // capture the button state at the outset so we can restore it if need be
  document.addEventListener("DOMContentLoaded", function() {
    bulkEditExecuteButton = document.querySelector('#execute_bulk_edit_button');
    originalBulkEditExecuteButtonCaption = bulkEditExecuteButton.innerText;
  });

  // called each time a checkbox is changed
  function validateBulkEditState() {
    // tally up checked count
    const checkedCount = document.querySelectorAll('input.bulk-edit-checkbox:checked').length;
    const valueCount = document.querySelectorAll('input.bulk-edit-value:checked').length;
    console.log('checkedCount: ' + checkedCount);
    console.log('valueCount: ' + valueCount);

    // enable execute button
    bulkEditExecuteButton.disabled = (checkedCount == 0) || (valueCount == 0);

    // update execute button caption
    bulkEditExecuteButton.innerText = originalBulkEditExecuteButtonCaption + (checkedCount == 0 ? '' : ' (' + checkedCount + ')');
  }

  function resetBulkEdit() {
    // uncheck all checkboxes
    document.querySelectorAll('.bulk-edit-checkbox').forEach(function(elem) {
      elem.checked = false;
    });

    // uncheck all radio buttons
    document.querySelectorAll('.bulk-edit-value').forEach(function(elem) {
      elem.checked = false;
    });

    // reset execute button
    bulkEditExecuteButton.disabled = true;
    bulkEditExecuteButton.innerText = originalBulkEditExecuteButtonCaption;
  }

  function hideEmptyLetterIndices() {
    // first, iterate over all month rows and hide them...
    document.querySelectorAll('.letter-index').forEach(function(elem) {
      elem.style.display = 'none';
    });

    // ...then, iterate over all visible event rows, traverse backward until we
    // hit a month header, and reveal it. There's an inefficiency here in that
    // we're iterating on every visible event row, meaning we'll repeatedly
    // unhide the same month headers. TODO: traverse forward to next month header,
    // then traverse from there to the next visible event row
    document.querySelectorAll('.member-row').forEach(function(elem) {
      var compStyles = window.getComputedStyle(elem);
      var compDisplay = compStyles.getPropertyValue('display');
      if(compDisplay == 'none') {
        return; // nothing to see here...move on
      }

      const selector = '.letter-index';
      var indexRow = queryPreviousSiblingSelector(elem, selector);
      indexRow.style.display = 'table-row';
    });    
  }

  document.addEventListener("turbo:load", function() {
    hideEmptyLetterIndices();
  })  