// invoked from Events#list, Events#show, and EventDashboard#index
// hence, we will stream responses that target all three

// THESE STREAMS TARGET EventDashboard#index
- @rsvps.each do |rsvp|

  // remove from wherever the RSVP currently is
  = turbo_stream.remove dom_id(rsvp)
  = turbo_stream.remove dom_id(rsvp.unit_membership)

  // add to the appropriate column
  - if rsvp.persisted?
    = turbo_stream.append("rsvps_#{rsvp.response}") do
      = render partial: "event_dashboard/rsvp",
              locals:  { rsvp: rsvp }
  - elsif rsvp.member.status_active?
    = turbo_stream.append("members_active") do
      = render partial: "event_dashboard/member",
              locals:  { member: rsvp.member }
  - elsif rsvp.member.status_registered?
    = turbo_stream.append("members_registered") do
      = render partial: "event_dashboard/member",
              locals:  { member: rsvp.member }

  = turbo_stream.replace("rsvps_accepted_header") do
    = render partial: "event_dashboard/header_accepted", locals: { event_dashboard: @event_dashboard }

  = turbo_stream.replace("rsvps_declined_header") do
    = render partial: "event_dashboard/header_declined", locals: { event_dashboard: @event_dashboard }

  = turbo_stream.replace("members_active_header") do
    = render partial: "event_dashboard/header_active", locals: { event_dashboard: @event_dashboard }

  = turbo_stream.replace("members_registered_header") do
    = render partial: "event_dashboard/header_registered", locals: { event_dashboard: @event_dashboard }        

// clear modal (applies to Events#list and EventDashboard#index)
= turbo_stream.update "modal" do
  = ""

// THIS STREAM TARGETS Events#index VIEW
= turbo_stream.replace dom_id(@event) do
  = render partial: "events/event", locals:  { event: @event }

// THIS STREAM TARGETS Events#show VIEW
= turbo_stream.replace "rsvp_section" do
  = render partial: "events/partials/show/rsvp", locals: { event: @event }