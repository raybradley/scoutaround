#search_results
  div
    .flex.flex-row.justify-between.p-2.hidden
      div
        = f.radio_button :recipients, :member_cohort
        = f.label :recipient_member_cohort, t("messages.form.labels.members"), class: "ml-2"

      div

    fieldset.dependent-fieldset(data-dependee-id="#message_recipients_member_cohort")
      // ACTIVE MEMBERS
      .flex.flex-row.justify-between.p-2
        div
          = f.check_box :recipient_details,
            { multiple: true,
              data: { adult_count: @unit.members.status_active.adult.count,
                      youth_count: @unit.members.status_active.youth.count },
              class: "countable member-cohort",
              checked: @message.recipient_details.include?("active") },
            :active, nil

          = label_tag :message_recipient_details_active, t("messages.form.labels.active_members"), class: "ml-2"

        div.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider
            = "#{@unit.members.status_active.count}"

      // FRIENDS & FAMILY
      .flex.flex-row.justify-between.p-2
        div
          = f.check_box :recipient_details,
            { multiple: true,
              data: { adult_count: @unit.members.status_registered.adult.count,
                      youth_count: @unit.members.status_registered.youth.count },
              class: "countable member-cohort",
              checked: @message.recipient_details.include?("family_and_friends") },
            :family_and_friends, nil

          = label_tag :message_recipient_details_family_and_friends, t("messages.form.labels.family_and_friends"), class: "ml-2"

        div.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider
          = "#{@unit.members.status_registered.count}"

    hr

    // EVENTS
    - @unit.events.published.recent_and_future.rsvp_required.each do |event|
      fieldset.flex.flex-row.justify-between.p-2
        div
          = f.radio_button :recipients,
            "event_#{event.id}_attendees",
            data: { adult_count: event.rsvps.accepted.select { |r| r.member.adult? }.count,
                    youth_count: event.rsvps.accepted.select { |r| r.member.youth? }.count },
            class: "countable event-cohort"                

          = f.label "recipients_event_#{event.id}_attendees", t("messages.form.labels.event_attendees", event_title: event.title), class: "ml-2"

        div
          .inline-block.text-xs
            - if event.starts_at.future?
              = " (#{distance_of_time_in_words_to_now(event.starts_at)} from now)"
            - else
              = " (#{distance_of_time_in_words_to_now(event.ends_at)} ago)"

          .inline-block.rounded.bg-stone-100.text-stone-700.p-1.text-xs.font-bold.tracking-wider.ml-2
            = "#{event.rsvps.accepted.count}"

css:
  .countable {
    display: none;
  }

  .countable ~ label:before {
    margin-right: 0.5rem;
    height: 0.5em;
    display: inline-block;
    vertical-align: -.325em;
    text-align: center;
  }

  .countable.member-cohort ~ label:before {
    content: url('data:image/svg+xml;charset=UTF-8, <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 640 512"><path fill="rgba(230, 100, 37, 1.0)" d="M319.9 320c57.41 0 103.1-46.56 103.1-104c0-57.44-46.54-104-103.1-104c-57.41 0-103.1 46.56-103.1 104C215.9 273.4 262.5 320 319.9 320zM369.9 352H270.1C191.6 352 128 411.7 128 485.3C128 500.1 140.7 512 156.4 512h327.2C499.3 512 512 500.1 512 485.3C512 411.7 448.4 352 369.9 352zM512 160c44.18 0 80-35.82 80-80S556.2 0 512 0c-44.18 0-80 35.82-80 80S467.8 160 512 160zM183.9 216c0-5.449 .9824-10.63 1.609-15.91C174.6 194.1 162.6 192 149.9 192H88.08C39.44 192 0 233.8 0 285.3C0 295.6 7.887 304 17.62 304h199.5C196.7 280.2 183.9 249.7 183.9 216zM128 160c44.18 0 80-35.82 80-80S172.2 0 128 0C83.82 0 48 35.82 48 80S83.82 160 128 160zM551.9 192h-61.84c-12.8 0-24.88 3.037-35.86 8.24C454.8 205.5 455.8 210.6 455.8 216c0 33.71-12.78 64.21-33.16 88h199.7C632.1 304 640 295.6 640 285.3C640 233.8 600.6 192 551.9 192z"></path></svg>');
  }

  .countable.event-cohort ~ label:before {
    content: url('data:image/svg+xml;charset=UTF-8, <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 640 512"><path fill="rgba(230, 100, 37, 1.0)" d="M96 32C96 14.33 110.3 0 128 0C145.7 0 160 14.33 160 32V64H288V32C288 14.33 302.3 0 320 0C337.7 0 352 14.33 352 32V64H400C426.5 64 448 85.49 448 112V160H0V112C0 85.49 21.49 64 48 64H96V32zM448 464C448 490.5 426.5 512 400 512H48C21.49 512 0 490.5 0 464V192H448V464z"></path></svg>');
    padding-left: 3px;
    margin-right: 4px;
  }

  .countable:checked ~ label:before {
    content: url('data:image/svg+xml;charset=UTF-8, <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 640 512"><path fill="%2322C55E" d="M438.6 105.4C451.1 117.9 451.1 138.1 438.6 150.6L182.6 406.6C170.1 419.1 149.9 419.1 137.4 406.6L9.372 278.6C-3.124 266.1-3.124 245.9 9.372 233.4C21.87 220.9 42.13 220.9 54.63 233.4L159.1 338.7L393.4 105.4C405.9 92.88 426.1 92.88 438.6 105.4H438.6z"></path></svg>');
  }

javascript:



  // Iterate over all dependent fieldsets and see if their corresponding dependee elements
  // are selected. If not, then deselect all inputs in the fieldset
  function deselectDependentFieldsets() {
    document.querySelectorAll(".dependent-fieldset").forEach(function(fieldsetElem) {
      var dependeeElem = findFieldsetDependee(fieldsetElem);
      if (dependeeElem.checked) { return; }

      deselectFieldset(fieldsetElem);
    });
  }  

  // given a fieldset, return the input it depends on
  function findFieldsetDependee(fieldsetElem) {
    var dependeeId = fieldsetElem.dataset.dependeeId;
    return document.querySelector(dependeeId);
  }

  // deselect all checkboxes in a given fieldset
  function deselectFieldset(fieldsetElem) {
    fieldsetElem.querySelectorAll("input").forEach(function(elem) {
      elem.checked = false;
    });
  }

  // dependent fieldsets contain inputs whose values are linked to another "parent" input value,
  // forming nested input structures. This block sets up the event handlers for them.
  function selectDependee(event) {
    if (!event.target.checked) { return; }

    var fieldsetElem = event.target.closest(".dependent-fieldset");
    var dependeeElem = findFieldsetDependee(fieldsetElem);
    dependeeElem.checked = true;
  }  

  function renderRecipientCount() {
    var countElem = document.querySelector("#recipient_count");
    var memberType = document.querySelector("input[name='message[member_type]']:checked").value;
    var count = 0;
    document.querySelectorAll("input.countable:checked").forEach(function(elem) {
      count = count + (parseInt(elem?.dataset?.adultCount) || 0);
      if (memberType == "youth_and_adults") {
        count = count + (parseInt(elem?.dataset?.youthCount) || 0);
      }
    });

    countElem.innerText = `${count} recipient(s)`;
  }

  // called whenever a recipient <input> is clicked
  function searchResultClick(event) {
    var inputElem = event.target;
    if (inputElem.closest(".dependent-fieldset")) {
      selectDependee(event);
    } else {
      deselectDependentFieldsets();
    }
    renderRecipientList();
    renderRecipientCount();
    hideSearchResults();
  }

  function hideSearchResults() {
    document.querySelector("#search_results").closest(".dropdown").classList.remove("menu-open");
  }

  // given an input, find its corresponding label
  function labelForInput(inputElem) {
    var inputElemId = inputElem.id;
    var selector = `label[for="${inputElemId}"]`;
    var labelElem = document.querySelector(selector);
    return labelElem;
  }

  // given an input, return the text of its corresponding label
  function labelTextForInput(inputElem) {
    var labelElem = labelForInput(inputElem);
    var result = labelElem?.innerText;
    return result;
  }

  // figure out who's selected and display it in the text field
  function renderRecipientList() {
    var selectedDemographicGroupElem = document.querySelector("input[name='cohort']:checked");
    var childSelector = "input.countable:checked";
    var textFieldElem = document.querySelector("#direct_recipients");
    var results = [];
    
    document.querySelectorAll(childSelector).forEach(function(elem) {
      // if (elem.checked) {
        results.push(labelTextForInput(elem));
      // }
    });
    
    resultText = results.join(", ");

    if (resultText.length > 0) {
      textFieldElem.value = resultText;
      gValidRecipient = true;
    } else {
      textFieldElem.value = "Select one or more recipient groups";
      gValidRecipient = false;
    }
  }  

  function performSetup() {
    // set up listeners on all <input> tags
    document.querySelectorAll("#search_results input").forEach(function(elem) {
      elem.addEventListener("click", function(event) {
        searchResultClick(event);
      });
    });

    // set up listener on All/Adults Only radios
    document.querySelectorAll("input[name='message[member_type]']").forEach(function(elem) {
      elem.addEventListener("click", function(event) {
        renderRecipientCount();
      })
    });

    // populate the UI
    renderRecipientCount();
    renderRecipientList();    
  }

  document.addEventListener("turbo:load", function() {
    performSetup();
  });