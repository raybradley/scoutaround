- return unless ChatMessagePolicy.new(@current_member, ChatMessage.new).create?

- if @event.chat.messages.count.zero?
  p.font-bold.text-stone-400.text-sm.mb-4
    = "No one has posted in the discussion yet."

= form_with(model: ChatMessage.new,
            url: unit_event_discussion_index_path(@unit, @event),
            :method => :post,
            :remote => true) do |f|
  - if ChatMessagePolicy.new(@current_member, ChatMessage.new).impersonate? && params[:impersonate].present?
    #chat_impersonation.text-xs.mb-2
      = f.label :post_as, class: "block mb-1 font-bold text-red-500"
      = f.select :author_id,
                options_for_select(@unit.members.map { |m| [m.short_display_name, m.id] }, @current_member.id),
                { include_blank: "Send as..." },
                { class: "block w-full border border-red-500 placeholder-stone-300 rounded p-2 text-xs font-bold text-red-500" }

  .relative
    = f.text_field(:message,
                  class: "w-full border border-stone-400 dark:bg-black dark:border-stone-600 placeholder-stone-300 rounded p-2 text-sm text-stone-900 pr-10",
                  placeholder: "Type a new message",
                  autocapitalize: "on",
                  onkeydown: "if (event.keyCode == 13 && !event.shiftKey) { event.preventDefault(); document.querySelector('#discussion_submit_button').click(); }")

    .absolute.right-2.top-2(style="font-size: 0.75rem;")
      = f.button type: "submit", title: "Send message", id: "discussion_submit_button" do
        .fa-stack
          i.fa-solid.fa-circle.fa-stack-2x.text-sky-500
          i.fa-solid.fa-paper-plane.fa-stack-1x.fa-inverse.dark:text-sky-900

  kbd.text-xs.font-sans.font-semibold.text-right.text-stone-400.block
    - if request.headers["User-Agent"]&.include?("Macintosh")
      abbr = "âŒ˜"
      = " RETURN to send"
    - elsif request.headers["User-Agent"]&.include?("Windows")
      abbr = "Ctrl +"
      = " RETURN to send"