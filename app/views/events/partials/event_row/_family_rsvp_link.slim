- return unless event.requires_rsvp && user_signed_in?

/ TODO: roll all this the FamilyRsvp object
- family_has_rsvps = false
- family_fully_responded = true
- event_rsvps = event.rsvps.includes(:unit_membership)
- rsvp_service = RsvpService.new(@current_member, event)
- @current_member.family.each do |member|
  - rsvp = event_rsvps.select { |r| r.unit_membership == member }&.first
  - family_has_rsvps = family_has_rsvps || rsvp.present?
  - family_fully_responded = family_fully_responded && rsvp.present?

- show_rsvp ||= false
- details_tag_attributes = {class: "inline-block group #{family_fully_responded ? 'fully-responded' : 'response-needed' }"}
- details_tag_attributes[:open] = "" if show_rsvp

- if event.rsvp_open?
  - if policy(event).rsvp?
    - if family_fully_responded
      = link_to new_unit_event_family_rsvp_path(@unit, event),
                class: "block px-4 py-2 text-center rounded-lg font-semibold ring-1 ring-inset ring-amber-500 text-amber-700",
                title: "#{rsvp_service.family_responses_in_words}",
                data: { turbo_frame: "modal" } do
        = t(".update")

    - else
      = link_to new_unit_event_family_rsvp_path(@unit, event),
                class: "block px-4 py-2 text-center rounded-lg font-semibold bg-amber-200 hover:bg-amber-300 text-amber-900",
                title: "#{rsvp_service.family_responses_in_words}",
                data: { turbo_frame: "modal" } do
        = t(".new")

- else
  .font-semibold.text-sm
    i.fa-solid.fa-ban.mr-2
    = t("events.index.rsvp.closed")
