- return unless event.requires_rsvp && user_signed_in?

- family_rsvp = FamilyRsvp.new(current_member, event)

/ TODO: roll all this the FamilyRsvp object
- family_has_rsvps = false
- family_fully_responded = true
- event_rsvps = event.rsvps.includes(:unit_membership)
- rsvp_service = RsvpService.new(current_member, event)
- current_member.family.each do |member|
  - rsvp = event_rsvps.select { |r| r.unit_membership == member }&.first
  - family_has_rsvps = family_has_rsvps || rsvp.present?
  - family_fully_responded = family_fully_responded && rsvp.present?


- if event.rsvp_open?
  - if policy(event).rsvp?

    - if family_has_rsvps
      ol.text-xs.mb-2
        - family_rsvp.active_family_members.each_with_index do |family_member, index|
          - response_glyph = ApplicationHelper::RESPONSE_GLYPHS[family_member.response.to_sym]
          - response_color = ApplicationHelper::RESPONSE_COLORS[family_member.response.to_sym]

          li.inline-block.font-medium.mr-3
            i.fa-solid.mr-1(class="#{response_glyph} text-#{response_color}" data-fa-transform="shrink-0")
            = family_member.first_name

    - if family_fully_responded
      = link_to new_unit_event_family_rsvp_path(current_unit, event),
                class: "text-sm font-medium whitespace-nowrap block px-4 py-2 text-center rounded border border-brand-500 hover:border-brand-700 text-brand-500 hover:text-brand-700 bg-white hover:bg-brand-100",
                title: "#{rsvp_service.family_responses_in_words}",
                data: { turbo_frame: "modal" } do
        = t(".update")

    - elsif family_has_rsvps
      = link_to new_unit_event_family_rsvp_path(current_unit, event),
                class: "whitespace-nowrap block px-4 py-2 text-center rounded font-medium bg-brand-500 hover:bg-brand-600 text-white",
                title: "#{rsvp_service.family_responses_in_words}",
                data: { turbo_frame: "modal" } do
        = "Complete Your RSVP"

    - else
      = link_to new_unit_event_family_rsvp_path(current_unit, event),
                class: "whitespace-nowrap block px-4 py-2 text-center rounded font-medium bg-brand-500 hover:bg-brand-600 text-white text-sm font-medium",
                title: "#{rsvp_service.family_responses_in_words}",
                data: { turbo_frame: "modal" } do
        = t(".new")

  .inline-block.text-xs.text-stone-500
    = "RSVPs close in "
    = distance_of_time_in_words_to_now(event.rsvp_closes_at).downcase
    = ", " + event.headcount_remaining.to_s + " spots left" if event.limits_headcount?

- elsif event.rsvp_opens_at&.future?
  .font-semibold.text-sm.text-amber-600.text-center.md:text-left
    i.fa-solid.fa-ban.mr-2
    = t("events.index.rsvp.not_open")

- else
  .font-semibold.text-sm.text-amber-600.border.border-amber-600.text-center.rounded.p-2
    i.fa-solid.fa-ban.mr-2
    = t("events.index.rsvp.closed")
